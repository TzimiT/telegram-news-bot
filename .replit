modules = ["python-3.12", "postgresql-16"]

[nix]
channel = "stable-24_05"

[workflows]
runButton = "Main Service 24/7"

[[workflows.workflow]]
name = "Setup Session"
author = 43151943
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python session_manager.py"

[[workflows.workflow]]
name = "User Bot Active"
author = 43151943
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python get_users.py"

[[workflows.workflow]]
name = "Manual News Send"
author = 43151943
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python news_bot_part.py --once"

[[workflows.workflow]]
name = "Main Service 24/7"
author = 43151943
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python main_service.py"

[[workflows.workflow]]
name = "View Recommendations"
author = 43151943
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python show_recommendations.py"

[[workflows.workflow]]
name = "Development Mode"
author = 43151943
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python get_users.py --dev"

[[workflows.workflow]]
name = "Test News Send"
author = 43151943
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python news_bot_part.py --test"

[[workflows.workflow]]
name = "Dev Database Check"
author = 43151943
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python -c \"from database import db; print('DB Status:', db.get_user_stats())\""

[[workflows.workflow]]
name = "Manual Sport News Send"
author = 43151943
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python sport_news_bot.py --once"

[[workflows.workflow]]
name = "Setup Sport Channels"
author = 43151943
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python -c \""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "import asyncio"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "from telethon import TelegramClient"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "from config import api_id, api_hash"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "from get_channels import get_channels_fullinfo_from_folder"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "async def setup_sport_channels():"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    SESSION_FILE = 'sessions/news_session'"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    async with TelegramClient(SESSION_FILE, api_id, api_hash) as client:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        await get_channels_fullinfo_from_folder(client, 'Sport', 'sport_channels.json')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        print('‚úÖ –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "asyncio.run(setup_sport_channels())"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "\""

[[workflows.workflow]]
name = "Check Telegram Folders"
author = 43151943
mode = "sequential"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "python -c \""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "import asyncio"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "from telethon import TelegramClient"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "from telethon.tl.functions.messages import GetDialogFiltersRequest"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "from config import api_id, api_hash"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "async def check_folders():"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    SESSION_FILE = 'sessions/news_session'"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "    async with TelegramClient(SESSION_FILE, api_id, api_hash) as client:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        try:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            filters = await client(GetDialogFiltersRequest())"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            print('üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏ –≤ Telegram:')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            for i, filter_obj in enumerate(filters.filters, 1):"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "                if hasattr(filter_obj, 'title'):"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "                    print(f'{i}. {filter_obj.title} ({len(filter_obj.include_peers)} –∫–∞–Ω–∞–ª–æ–≤)')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "        except Exception as e:"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "            print(f'–û—à–∏–±–∫–∞: {e}')"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = ""

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "asyncio.run(check_folders())"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "\""

[deployment]
build = ["sh", "-c", "python news_bot_part.py"]
deploymentTarget = "scheduled"
