from telethon import TelegramClient
from telegram import Bot
import openai
from config import api_id, api_hash, telegram_bot_token, openai_api_key, FOLDER_NAME
import asyncio
from datetime import datetime, timedelta, timezone
import json
import os
import logging

from get_channels import get_channels_fullinfo_from_folder, load_channels_from_json
from database import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('subscribers_log.txt', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

SUBSCRIBERS_FILE = 'subscribers.json'

def load_subscribers():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(SUBSCRIBERS_FILE):
            with open(SUBSCRIBERS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data.get('subscribers', [])
        else:
            # –ú–∏–≥—Ä–∞—Ü–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            return migrate_old_subscribers()
    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {SUBSCRIBERS_FILE}: {e}")
        return []

def migrate_old_subscribers():
    OLD_SUBSCRIBERS_FILE = 'subscribers_id.txt'
    new_subscribers = []
    if os.path.exists(OLD_SUBSCRIBERS_FILE):
        try:
            with open(OLD_SUBSCRIBERS_FILE, 'r', encoding='utf-8') as f:
                old_ids = [line.strip() for line in f.readlines()]

            for user_id in old_ids:
                try:
                    user_id = int(user_id)
                    new_subscribers.append({
                        "user_id": user_id,
                        "subscribed_at": datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S"),
                        "migrated": True
                    })
                except ValueError:
                    continue

            if new_subscribers:
                with open(SUBSCRIBERS_FILE, 'w', encoding='utf-8') as f:
                    json.dump({"subscribers": new_subscribers}, f, ensure_ascii=False, indent=2)

                logger.info(f"[INFO] –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(new_subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞")
            return new_subscribers
        except Exception as e:
            logger.error(f"[ERROR] –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
    return []

def get_yesterday_range():
    today = datetime.now(timezone.utc).date()
    start = datetime.combine(today - timedelta(days=1), datetime.min.time(), tzinfo=timezone.utc)
    end = datetime.combine(today, datetime.min.time(), tzinfo=timezone.utc)
    return start, end

def summarize_news(news_list):
    text = "\n\n".join(news_list)
    client_ai = openai.OpenAI(api_key=openai_api_key)
    response = client_ai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —Å—É—Ç–∫–∏ –ø–æ —ç—Ç–∏–º –≤—ã–¥–µ—Ä–∂–∫–∞–º, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏. –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ - –∫–ª–∞—Å—Ç–µ—Ä–∏–∑—É–π –≤ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ—Å–≤–µ—â–∞–π –≤—Å—ë –ø—Ä–æ AI."},
            {"role": "user", "content": text}
        ],
        max_tokens=3000,
        temperature=0.7
    )
    return response.choices[0].message.content

async def get_news(client, channels):
    all_news = []
    start, end = get_yesterday_range()
    print(f"[DEBUG] –î–∏–∞–ø–∞–∑–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞: {start} ... {end}")
    for channel_info in channels:
        username = channel_info.get("username")
        if not username:
            continue
        async for message in client.iter_messages(username):
            msg_date = message.date
            if msg_date.tzinfo is None:
                msg_date = msg_date.replace(tzinfo=timezone.utc)
            msg_date_norm = msg_date.replace(microsecond=0)
            if msg_date_norm < start:
                break
            if start <= msg_date_norm < end and message.text:
                all_news.append(f"{message.text}\n–ò—Å—Ç–æ—á–Ω–∏–∫: https://t.me/{username}/{message.id}\n")
                print(f"[DEBUG] {username} | id={message.id} | –¥–∞—Ç–∞={msg_date_norm} - –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    return all_news

async def send_news(summary):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    subscribers = db.get_active_users()
    if not subscribers:
        logger.warning("[WARN] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    bot = Bot(token=telegram_bot_token)
    successful_sends = 0
    failed_subscribers = []

    logger.info(f"[INFO] –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(subscribers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")

    for user_id in subscribers:
        try:
            result = await bot.send_message(chat_id=user_id, text=summary)
            logger.info(f"[SUCCESS] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, message_id={result.message_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
            db.update_user_interaction(user_id)
            successful_sends += 1
        except Exception as e:
            error_msg = str(e)
            logger.error(f"[FAILED] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {error_msg}")
            failed_subscribers.append(user_id)
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
            if "Chat not found" in error_msg or "Forbidden: bot was blocked" in error_msg:
                db.remove_user(user_id)
                logger.info(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞")

    logger.info(f"[INFO] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ={successful_sends}, –Ω–µ—É–¥–∞—á–Ω–æ={len(failed_subscribers)}")

    if failed_subscribers:
        logger.warning(f"[INFO] –ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π {len(failed_subscribers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

SESSION_FILE = 'sessions/news_session'

async def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
    if not os.path.exists(f"{SESSION_FILE}.session"):
        print(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {SESSION_FILE}.session –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ workflow 'Setup Session' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏.")
        return
    else:
        print(f"‚úÖ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {SESSION_FILE}.session –Ω–∞–π–¥–µ–Ω")

    async with TelegramClient(
        SESSION_FILE, 
        api_id, 
        api_hash,
        device_model="Replit News Bot v2.1",
        system_version="Linux Replit", 
        app_version="2.1.0",
        lang_code="ru",
        system_lang_code="ru",
        use_ipv6=False,
        proxy=None
    ) as client:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        await client.connect()
        if not await client.is_user_authorized():
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ workflow 'Setup Session' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return
        # –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ—É –æ –∫–∞–Ω–∞–ª–∞—Ö –∏–∑ –ø–∞–ø–∫–∏
        await get_channels_fullinfo_from_folder(client, FOLDER_NAME)
        # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ—É –æ –∫–∞–Ω–∞–ª–∞—Ö –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        channels = load_channels_from_json()
        print(f"[LOG] –ö–∞–Ω–∞–ª—ã –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏: {[ch.get('username','?') for ch in channels]}")

        # –®–∞–≥ 3: –°–æ–±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
        news = await get_news(client, channels)
        print(f"[LOG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –≤—á–µ—Ä–∞: {len(news)}")
        if not news:
            print("[LOG] –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –≤—á–µ—Ä–∞. –ü—Ä–µ—Ä—ã–≤–∞—é —Ä–∞—Å—Å—ã–ª–∫—É.")
            return

        # –®–∞–≥ 4: –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫–∞
        summary = summarize_news(news)
        await send_news(summary)

async def run_continuous():
    """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    
    logger.info("üîÑ –°–ª—É–∂–±–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞")
    logger.info("üìÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 09:00 UTC –∫–∞–∂–¥—ã–π –¥–µ–Ω—å")
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC
            now = datetime.now(timezone.utc)
            target_time = now.replace(hour=9, minute=0, second=0, microsecond=0)
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if now >= target_time:
                target_time += timedelta(days=1)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            sleep_seconds = (target_time - now).total_seconds()
            
            logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {target_time.strftime('%Y-%m-%d %H:%M:%S UTC')}")
            logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ: {sleep_seconds/3600:.1f} —á–∞—Å–æ–≤")
            
            # –°–ø–∏–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
            await asyncio.sleep(sleep_seconds)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...")
            await main()
            
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –°–ª—É–∂–±–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
            await asyncio.sleep(300)  # –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "--once":
        # –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        asyncio.run(main())
    else:
        # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        asyncio.run(run_continuous())