import asyncio
import threading
import logging
from datetime import datetime
import sys

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
from news_bot_part import run_continuous as news_service
from get_users import start_bot as user_bot
from database import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('main_service.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

async def main():
    """–ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å 24/7 –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –±–æ—Ç—ã"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Main Service 24/7")
    logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        stats = db.get_user_stats()
        logger.info(f"‚úÖ PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç: {stats['active_users']} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    tasks = []

    # 1. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–æ–≤–æ—Å—Ç–µ–π (—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
    logger.info("üì∞ –ó–∞–ø—É—Å–∫ News Aggregator Service...")
    news_task = asyncio.create_task(news_service())
    tasks.append(news_task)

    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    logger.info("üë• –ó–∞–ø—É—Å–∫ User Collection Bot...")
    def run_user_bot():
        try:
            asyncio.set_event_loop(asyncio.new_event_loop())
            user_bot()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ User Bot: {e}")

    user_bot_thread = threading.Thread(target=run_user_bot, daemon=True)
    user_bot_thread.start()

    logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç 24/7")
    logger.info("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
    logger.info("   - üì∞ News Aggregator (—Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 09:00 UTC)")
    logger.info("   - üë• User Collection Bot (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥)")
    logger.info("   - üóÑÔ∏è PostgreSQL Database")

    # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    try:
        await asyncio.gather(*tasks)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Main Service: {e}")
    finally:
        logger.info("üõë Main Service 24/7 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")