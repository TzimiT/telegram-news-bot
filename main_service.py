
import asyncio
import logging
from datetime import datetime, timedelta, timezone
import json
import os
from telethon import TelegramClient
from telegram import Bot, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
)
import openai

from config import api_id, api_hash, telegram_bot_token, openai_api_key, FOLDER_NAME
from get_channels import get_channels_fullinfo_from_folder, load_channels_from_json
from database import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('main_service.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler
RECOMMEND_WAIT_INPUT = 1
SESSION_FILE = 'sessions/news_session'

class MainService:
    def __init__(self):
        self.telegram_app = None
        self.news_task = None
        self.bot_task = None
        
    async def start_services(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ 24/7...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await self.start_user_bot()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        self.news_task = asyncio.create_task(self.news_aggregator_service())
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        await asyncio.gather(
            self.news_task,
            return_exceptions=True
        )
    
    async def start_user_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        try:
            app = ApplicationBuilder().token(telegram_bot_token).build()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            app.add_handler(CommandHandler("start", self.start_command))
            app.add_handler(CommandHandler("help", self.help_command))
            app.add_handler(CommandHandler("stop", self.stop_command))
            app.add_handler(CommandHandler("status", self.status_command))
            app.add_handler(CommandHandler("channels", self.channels_command))
            app.add_handler(CommandHandler("admin_stats", self.admin_stats_command))
            
            # Conversation handler –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
            recommend_conv_handler = ConversationHandler(
                entry_points=[CommandHandler("recommend_channel", self.recommend_channel_start)],
                states={
                    RECOMMEND_WAIT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.recommend_channel_receive)]
                },
                fallbacks=[CommandHandler("cancel", self.recommend_channel_cancel)]
            )
            app.add_handler(recommend_conv_handler)
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.echo))
            
            logger.info("ü§ñ Telegram –±–æ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—É—â–µ–Ω...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            self.bot_task = asyncio.create_task(app.run_polling())
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞: {e}")
    
    async def news_aggregator_service(self):
        """–°–µ—Ä–≤–∏—Å –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
        logger.info("üì∞ –°–ª—É–∂–±–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞")
        logger.info("üìÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 09:00 UTC –∫–∞–∂–¥—ã–π –¥–µ–Ω—å")
        
        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC
                now = datetime.now(timezone.utc)
                target_time = now.replace(hour=9, minute=0, second=0, microsecond=0)
                
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                if now >= target_time:
                    target_time += timedelta(days=1)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                sleep_seconds = (target_time - now).total_seconds()
                
                logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {target_time.strftime('%Y-%m-%d %H:%M:%S UTC')}")
                logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ: {sleep_seconds/3600:.1f} —á–∞—Å–æ–≤")
                
                # –°–ø–∏–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
                await asyncio.sleep(sleep_seconds)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
                logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π...")
                await self.send_daily_news()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª—É–∂–±–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
                logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
                await asyncio.sleep(300)  # –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def send_daily_news(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
            if not os.path.exists(f"{SESSION_FILE}.session"):
                logger.error(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {SESSION_FILE}.session –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                logger.error("–ó–∞–ø—É—Å—Ç–∏—Ç–µ workflow 'Setup Session' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏.")
                return
            
            async with TelegramClient(
                SESSION_FILE, 
                api_id, 
                api_hash,
                device_model="Replit News Bot v2.1",
                system_version="Linux Replit", 
                app_version="2.1.0",
                lang_code="ru",
                system_lang_code="ru",
                use_ipv6=False,
                proxy=None
            ) as client:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                await client.connect()
                if not await client.is_user_authorized():
                    logger.error("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ workflow 'Setup Session'.")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã
                logger.info(f"[LOG] –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫–µ '{FOLDER_NAME}'...")
                await get_channels_fullinfo_from_folder(client, FOLDER_NAME)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã
                channels = load_channels_from_json()
                logger.info(f"[LOG] –ö–∞–Ω–∞–ª—ã –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ ({len(channels)} —à—Ç.): {[ch.get('username','?') for ch in channels]}")
                
                if not channels:
                    logger.error(f"[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫–µ '{FOLDER_NAME}'.")
                    return
                
                # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
                news = await self.get_news(client, channels)
                logger.info(f"[LOG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –≤—á–µ—Ä–∞: {len(news)}")
                
                if not news:
                    logger.info("[LOG] –ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –≤—á–µ—Ä–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É.")
                    return
                
                # –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫–∞
                summary = self.summarize_news(news)
                await self.send_news(summary)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
    
    async def get_news(self, client, channels):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –≤—á–µ—Ä–∞"""
        all_news = []
        start, end = self.get_yesterday_range()
        logger.debug(f"[DEBUG] –î–∏–∞–ø–∞–∑–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞: {start} ... {end}")
        
        for channel_info in channels:
            username = channel_info.get("username")
            if not username:
                continue
            try:
                async for message in client.iter_messages(username):
                    msg_date = message.date
                    if msg_date.tzinfo is None:
                        msg_date = msg_date.replace(tzinfo=timezone.utc)
                    msg_date_norm = msg_date.replace(microsecond=0)
                    if msg_date_norm < start:
                        break
                    if start <= msg_date_norm < end and message.text:
                        all_news.append(f"{message.text}\n–ò—Å—Ç–æ—á–Ω–∏–∫: https://t.me/{username}/{message.id}\n")
                        logger.debug(f"[DEBUG] {username} | id={message.id} | –¥–∞—Ç–∞={msg_date_norm} - –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.warning(f"[WARN] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {username}: {e}")
        
        return all_news
    
    def get_yesterday_range(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞ –≤—á–µ—Ä–∞"""
        today = datetime.now(timezone.utc).date()
        start = datetime.combine(today - timedelta(days=1), datetime.min.time(), tzinfo=timezone.utc)
        end = datetime.combine(today, datetime.min.time(), tzinfo=timezone.utc)
        return start, end
    
    def summarize_news(self, news_list):
        """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ OpenAI"""
        text = "\n\n".join(news_list)
        client_ai = openai.OpenAI(api_key=openai_api_key)
        response = client_ai.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —Å—É—Ç–∫–∏ –ø–æ —ç—Ç–∏–º –≤—ã–¥–µ—Ä–∂–∫–∞–º, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏. –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ - –∫–ª–∞—Å—Ç–µ—Ä–∏–∑—É–π –≤ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ—Å–≤–µ—â–∞–π –≤—Å—ë –ø—Ä–æ AI."},
                {"role": "user", "content": text}
            ],
            max_tokens=3000,
            temperature=0.7
        )
        return response.choices[0].message.content
    
    async def send_news(self, summary):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        subscribers = db.get_active_users()
        if not subscribers:
            logger.warning("[WARN] –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            return
        
        bot = Bot(token=telegram_bot_token)
        successful_sends = 0
        failed_subscribers = []
        
        logger.info(f"[INFO] –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(subscribers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        
        for user_id in subscribers:
            try:
                result = await bot.send_message(chat_id=user_id, text=summary)
                logger.info(f"[SUCCESS] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, message_id={result.message_id}")
                db.update_user_interaction(user_id)
                successful_sends += 1
            except Exception as e:
                error_msg = str(e)
                logger.error(f"[FAILED] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {error_msg}")
                failed_subscribers.append(user_id)
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —á–∞—Ç–∞
                if "Chat not found" in error_msg or "Forbidden: bot was blocked" in error_msg:
                    db.remove_user(user_id)
                    logger.info(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞")
        
        logger.info(f"[INFO] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ={successful_sends}, –Ω–µ—É–¥–∞—á–Ω–æ={len(failed_subscribers)}")
    
    # ============ –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–û–ì–û –ë–û–¢–ê ============
    
    def save_subscriber(self, user):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        existing_user = db.get_user_info(user.id)
        if not existing_user or not existing_user['is_active']:
            success = db.add_user(user.id, user.username, user.first_name, user.last_name)
            if success:
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user.id} (@{user.username})")
                return True
        else:
            db.update_user_interaction(user.id)
        return False
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        was_added = self.save_subscriber(user)
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI." if was_added else "‚úÖ –¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI."
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "ü§ñ **–ë–æ—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI**\n\n"
            "üì∞ –ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/start ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI\n"
            "/stop ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "/recommend_channel ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π/–∫–∞–Ω–∞–ª –≤ —Ç–µ–ª–µ–≥–µ –ø—Ä–æ AI\n"
            "/channels ‚Äî —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏\n"
            "/status ‚Äî —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            parse_mode='Markdown'
        )
    
    async def echo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        was_added = self.save_subscriber(user)
        if was_added:
            await update.message.reply_text("ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI.")
        else:
            await update.message.reply_text("–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
    
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        db.remove_user(user.id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
        await update.message.reply_text("üò¢ –¢—ã –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –µ—Å–ª–∏ —á—Ç–æ!")
    
    async def recommend_channel_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ username (@example) –ø—Ä–æ AI, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
            "üí° –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ—á–µ–º—É —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return RECOMMEND_WAIT_INPUT
    
    async def recommend_channel_receive(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        text = update.message.text.strip()
        
        db.add_channel_recommendation(user.id, text)
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        rec_info = (
            f"date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | "
            f"user_id: {user.id} | username: @{user.username or '-'} | "
            f"name: {user.first_name or '-'} {user.last_name or '-'} | "
            f"recommend: {text}\n"
        )
        with open("channel_recommendations.txt", "a", encoding="utf-8") as f:
            f.write(rec_info)
        
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return ConversationHandler.END
    
    async def recommend_channel_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
    
    async def channels_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            with open("channels.json", "r", encoding="utf-8") as f:
                data = json.load(f)
                channels = data.get("channels", [])
            if not channels:
                await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
                return
            msg = "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:\n" + "\n".join(
                f"@{c['username']}" if c.get('username') else c.get('title', '-') for c in channels
            )
            await update.message.reply_text(msg)
        except Exception as e:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_info = db.get_user_info(user.id)
        
        if user_info and user_info['is_active']:
            stats = db.get_user_stats()
            await update.message.reply_text(
                f"‚úÖ **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:** –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI\n\n"
                f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active_users']}\n"
                f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {user_info['added_at']}\n"
                f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_info['last_interaction']}"
            )
        else:
            await update.message.reply_text(
                "‚ùå **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:** –¢—ã –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI\n\n"
                "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!"
            )
    
    async def admin_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        admin_ids = [94598500]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ ID
        
        if user.id not in admin_ids:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
        
        stats = db.get_user_stats()
        
        message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**

üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}
üìã –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}

üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
"""
        
        for user_data in stats['recent_users']:
            username, first_name, last_name, last_interaction = user_data
            name = f"{first_name} {last_name}".strip()
            message += f"‚Ä¢ @{username} ({name}) - {last_interaction}\n"
        
        await update.message.reply_text(message)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    service = MainService()
    try:
        await service.start_services()
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        logger.exception("–ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")

if __name__ == "__main__":
    asyncio.run(main())
