
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from database import db
import psycopg2
from psycopg2.extras import RealDictCursor

def cleanup_test_recommendations():
    """–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∫–∞–Ω–∞–ª–æ–≤...")
    
    try:
        conn = db._get_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        cursor.execute('''
            SELECT cr.id, cr.user_id, cr.recommendation, cr.created_at, cr.status,
                   u.username, u.first_name, u.last_name
            FROM channel_recommendations cr
            LEFT JOIN users u ON cr.user_id = u.user_id
            ORDER BY cr.created_at DESC
        ''')
        
        recommendations = cursor.fetchall()
        
        if not recommendations:
            print("‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(recommendations)}")
        print("\nüìã –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
        
        test_recommendations = []
        
        for i, rec in enumerate(recommendations, 1):
            print(f"{i}. ID: {rec['id']} | @{rec['username']} | {rec['recommendation'][:50]}...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
            # - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ—Å—Ç–æ–≤—ã–º ID (999999999)
            # - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "test", "—Ç–µ—Å—Ç", –∏–ª–∏ –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            username = rec['username'] or ''
            recommendation = rec['recommendation'].lower()
            
            if (rec['user_id'] == 999999999 or 
                'test' in username.lower() or 
                'test' in recommendation or 
                '—Ç–µ—Å—Ç' in recommendation or
                not rec['username']):
                test_recommendations.append(rec['id'])
                print(f"   ‚û§ –¢–ï–°–¢–û–í–ê–Ø (–±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞)")
        
        if not test_recommendations:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"\nüóëÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(test_recommendations)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        cursor.execute('''
            DELETE FROM channel_recommendations 
            WHERE id = ANY(%s)
        ''', (test_recommendations,))
        
        deleted_count = cursor.rowcount
        conn.commit()
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        cursor.execute('SELECT COUNT(*) as count FROM channel_recommendations')
        remaining = cursor.fetchone()['count']
        print(f"üìä –û—Å—Ç–∞–ª–æ—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {remaining}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

def cleanup_test_users():
    """–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    try:
        conn = db._get_connection()
        cursor = conn.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ user_stats
        cursor.execute('DELETE FROM user_stats WHERE user_id = %s', (999999999,))
        deleted_stats = cursor.rowcount
        
        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('DELETE FROM users WHERE user_id = %s', (999999999,))
        deleted_users = cursor.rowcount
        
        conn.commit()
        
        if deleted_users > 0:
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (ID: 999999999)")
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            print("‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        conn.rollback()
    finally:
        cursor.close()
        conn.close()

if __name__ == "__main__":
    try:
        cleanup_test_recommendations()
        cleanup_test_users()
        
        print("\n" + "="*50)
        print("‚ú® –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π: python show_recommendations.py")
        
    except KeyboardInterrupt:
        print("\nüëã –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
