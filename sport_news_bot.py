
from telethon import TelegramClient
from telegram import Bot
import openai
from config import api_id, api_hash, telegram_bot_token, openai_api_key
import asyncio
from datetime import datetime, timedelta, timezone
import json
import os
import logging

from get_channels import get_channels_fullinfo_from_folder, load_channels_from_json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('sport_news_service.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @avdovin –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
SPORT_USER_ID = None  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å user_id –¥–ª—è @avdovin
SPORT_FOLDER_NAME = "–°–ø–æ—Ä—Ç"  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
SPORT_CHANNELS_FILE = "sport_channels.json"

def load_sport_channels():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    if os.path.exists(SPORT_CHANNELS_FILE):
        with open(SPORT_CHANNELS_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('channels', [])
    return []

def get_yesterday_range():
    today = datetime.now(timezone.utc).date()
    start = datetime.combine(today - timedelta(days=1), datetime.min.time(), tzinfo=timezone.utc)
    end = datetime.combine(today, datetime.min.time(), tzinfo=timezone.utc)
    return start, end

def summarize_sport_news(news_list):
    """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Å–ø–æ—Ä—Ç"""
    text = "\n\n".join(news_list)
    client_ai = openai.OpenAI(api_key=openai_api_key)
    response = client_ai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —Å—É—Ç–∫–∏ –ø–æ —ç—Ç–∏–º –≤—ã–¥–µ—Ä–∂–∫–∞–º, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏. –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ —Å–æ–±—ã—Ç–∏–µ - –∫–ª–∞—Å—Ç–µ—Ä–∏–∑—É–π –≤ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç. –ì—Ä—É–ø–ø–∏—Ä—É–π –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ—Å–≤–µ—â–∞–π –≤–∞–∂–Ω—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π, —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä—ã –∏ —Ç—É—Ä–Ω–∏—Ä—ã."},
            {"role": "user", "content": text}
        ],
        max_tokens=3000,
        temperature=0.7
    )
    return response.choices[0].message.content

async def get_sport_news(client, channels):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –≤—á–µ—Ä–∞"""
    all_news = []
    start, end = get_yesterday_range()
    print(f"[DEBUG] –î–∏–∞–ø–∞–∑–æ–Ω —Ñ–∏–ª—å—Ç—Ä–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {start} ... {end}")
    
    for channel_info in channels:
        username = channel_info.get("username")
        if not username:
            continue
            
        async for message in client.iter_messages(username):
            msg_date = message.date
            if msg_date.tzinfo is None:
                msg_date = msg_date.replace(tzinfo=timezone.utc)
            msg_date_norm = msg_date.replace(microsecond=0)
            
            if msg_date_norm < start:
                break
                
            if start <= msg_date_norm < end and message.text:
                all_news.append(f"{message.text}\n–ò—Å—Ç–æ—á–Ω–∏–∫: https://t.me/{username}/{message.id}\n")
                print(f"[DEBUG] SPORT {username} | id={message.id} | –¥–∞—Ç–∞={msg_date_norm} - –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    
    return all_news

async def send_sport_news(summary, user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not user_id:
        logger.warning("[WARN] User ID –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return

    bot = Bot(token=telegram_bot_token)
    
    logger.info(f"[INFO] –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        sport_summary = f"üèÜ **–°–ü–û–†–¢–ò–í–ù–´–ï –ù–û–í–û–°–¢–ò –ó–ê –í–ß–ï–†–ê**\n\n{summary}"
        
        result = await bot.send_message(chat_id=user_id, text=sport_summary, parse_mode='Markdown')
        logger.info(f"[SUCCESS] –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, message_id={result.message_id}")
        return True
    except Exception as e:
        error_msg = str(e)
        logger.error(f"[FAILED] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {error_msg}")
        return False

SESSION_FILE = 'sessions/news_session'

async def main_sport():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏
    if not os.path.exists(f"{SESSION_FILE}.session"):
        print(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {SESSION_FILE}.session –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ workflow 'Setup Session' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏.")
        return
    else:
        print(f"‚úÖ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ {SESSION_FILE}.session –Ω–∞–π–¥–µ–Ω")

    async with TelegramClient(
        SESSION_FILE, 
        api_id, 
        api_hash,
        device_model="Replit Sport News Bot v1.0",
        system_version="Linux Replit", 
        app_version="1.0.0",
        lang_code="ru",
        system_lang_code="ru",
        use_ipv6=False,
        proxy=None
    ) as client:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        await client.connect()
        if not await client.is_user_authorized():
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ workflow 'Setup Session'.")
            return

        # –ü–æ–ª—É—á–∞–µ–º user_id –¥–ª—è @avdovin –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–Ω–∞–µ–º
        global SPORT_USER_ID
        if not SPORT_USER_ID:
            try:
                avdovin_user = await client.get_entity('@avdovin')
                SPORT_USER_ID = avdovin_user.id
                logger.info(f"[INFO] –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @avdovin —Å ID: {SPORT_USER_ID}")
            except Exception as e:
                logger.error(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @avdovin: {e}")
                return

        # –®–∞–≥ 1: –ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ –ø–∞–ø–∫–∏ "Sport"
        print(f"[LOG] –ü—Ä–æ–≤–µ—Ä—è—é —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –ø–∞–ø–∫–µ '{SPORT_FOLDER_NAME}'...")
        await get_channels_fullinfo_from_folder(client, SPORT_FOLDER_NAME, SPORT_CHANNELS_FILE)

        # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        channels = load_sport_channels()
        print(f"[LOG] –°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ ({len(channels)} —à—Ç.): {[ch.get('username','?') for ch in channels]}")

        if not channels:
            print(f"[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫–µ '{SPORT_FOLDER_NAME}'.")
            return

        # –®–∞–≥ 3: –°–æ–±—Ä–∞—Ç—å —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
        news = await get_sport_news(client, channels)
        print(f"[LOG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –≤—á–µ—Ä–∞: {len(news)}")
        
        if not news:
            print("[LOG] –ù–µ—Ç —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –≤—á–µ—Ä–∞. –ü—Ä–µ—Ä—ã–≤–∞—é —Ä–∞—Å—Å—ã–ª–∫—É.")
            return

        # –®–∞–≥ 4: –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        summary = summarize_sport_news(news)
        success = await send_sport_news(summary, SPORT_USER_ID)
        
        if success:
            print("[LOG] ‚úÖ –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        else:
            print("[LOG] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def run_sport_continuous():
    """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–ª—É–∂–±—ã —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
    logger.info("üèÜ –°–ª—É–∂–±–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è @avdovin –∑–∞–ø—É—â–µ–Ω–∞")
    logger.info("üìÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 10:00 UTC –∫–∞–∂–¥—ã–π –¥–µ–Ω—å")

    while True:
        try:
            # –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π - 10:00 UTC (–Ω–∞ —á–∞—Å –ø–æ–∑–∂–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö)
            now = datetime.now(timezone.utc)
            next_run = now.replace(hour=10, minute=0, second=0, microsecond=0)

            if now >= next_run:
                next_run += timedelta(days=1)

            wait_time = (next_run - now).total_seconds()
            wait_hours = wait_time / 3600

            logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {next_run}")
            logger.info(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ: {wait_hours:.1f} —á–∞—Å–æ–≤")

            await asyncio.sleep(wait_time)

            logger.info("üèÜ –í—Ä–µ–º—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏! –ó–∞–ø—É—Å–∫–∞—é –∞–≥—Ä–µ–≥–∞—Ü–∏—é...")
            await main_sport()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª—É–∂–±–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            await asyncio.sleep(3600)

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description='Sport News Bot –¥–ª—è @avdovin')
    parser.add_argument('--once', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω —Ä–∞–∑')
    args = parser.parse_args()

    if args.once:
        asyncio.run(main_sport())
    else:
        asyncio.run(run_sport_continuous())
