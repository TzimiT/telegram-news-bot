import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
)
import json
import os
from datetime import datetime, timedelta, timezone
from database import db

RECOMMEND_WAIT_INPUT = 1

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

def get_next_news_time():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    now = datetime.now(timezone.utc)
    next_run = now.replace(hour=9, minute=0, second=0, microsecond=0)

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if now >= next_run:
        next_run += timedelta(days=1)

    time_diff = next_run - now
    hours_left = int(time_diff.total_seconds() // 3600)
    minutes_left = int((time_diff.total_seconds() % 3600) // 60)

    return {
        'datetime': next_run,
        'hours': hours_left,
        'minutes': minutes_left,
        'formatted': next_run.strftime('%d.%m.%Y –≤ %H:%M UTC')
    }

def get_channels_list():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏"""
    try:
        with open("channels.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            channels = data.get("channels", [])

        if not channels:
            return "üì≠ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—É—Å—Ç"

        channel_names = []
        for channel in channels:
            if channel.get('username'):
                channel_names.append(f"@{channel['username']}")
            elif channel.get('title'):
                channel_names.append(channel['title'])

        return "\n".join([f"‚Ä¢ {name}" for name in channel_names[:10]]) + \
               (f"\n‚Ä¢ –∏ –µ—â—ë {len(channel_names) - 10} –∫–∞–Ω–∞–ª–æ–≤..." if len(channel_names) > 10 else "")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return "üì≠ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"

def save_subscriber(user: Update.effective_user):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    existing_user = db.get_user_info(user.id)
    if not existing_user or not existing_user['is_active']:
        success = db.add_user(
            user.id,
            user.username,
            user.first_name,
            user.last_name
        )
        if success:
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user.id} (@{user.username})")
            return True
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        db.update_user_interaction(user.id)
    return False

def remove_subscriber(user_id):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db.remove_user(user_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    was_added = save_subscriber(user)

    next_news = get_next_news_time()
    channels_list = get_channels_list()

    if was_added:
        await update.message.reply_text(
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI.\n\n"
            f"–°–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {next_news['formatted']}\n"
            f"–ö–∞–Ω–∞–ª—ã –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:\n{channels_list}"
        )
    else:
        await update.message.reply_text("‚úÖ –¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ **–ë–æ—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI**\n\n"
        "üì∞ –ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI\n"
        "/stop ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "/recommend_channel ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π/–∫–∞–Ω–∞–ª –≤ —Ç–µ–ª–µ–≥–µ –ø—Ä–æ AI\n"
        "/channels ‚Äî —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏\n"
        "/status ‚Äî —Ç–≤–æ–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        parse_mode='Markdown'
    )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    was_added = save_subscriber(user)

    next_news = get_next_news_time()
    channels_list = get_channels_list()

    if was_added:
        await update.message.reply_text(
            "ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI.\n\n"
            f"–°–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞: {next_news['formatted']}\n"
            f"–ö–∞–Ω–∞–ª—ã –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:\n{channels_list}"
        )
    else:
        await update.message.reply_text("–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    remove_subscriber(user.id)
    await update.message.reply_text("üò¢ –¢—ã –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –µ—Å–ª–∏ —á—Ç–æ!")

# --- Recommend Channel Conversation ---

async def recommend_channel_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ username (@example) –ø—Ä–æ AI, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n"
        "üí° –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ—á–µ–º—É —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    return RECOMMEND_WAIT_INPUT

async def recommend_channel_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_channel_recommendation(user.id, text)

    # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    rec_info = (
        f"date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | "
        f"user_id: {user.id} | username: @{user.username or '-'} | "
        f"name: {user.first_name or '-'} {user.last_name or '-'} | "
        f"recommend: {text}\n"
    )
    with open("channel_recommendations.txt", "a", encoding="utf-8") as f:
        f.write(rec_info)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    return ConversationHandler.END

async def recommend_channel_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# --- /channels: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (—á–∏—Ç–∞–µ—Ç channels.json) ---
async def channels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("channels.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            channels = data.get("channels", [])
        if not channels:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
            return
        msg = "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:\n" + "\n".join(
            f"@{c['username']}" if c.get('username') else c.get('title', '-') for c in channels
        )
        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {e}")

# --- /status: —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_info = db.get_user_info(user.id)

    if user_info and user_info['is_active']:
        stats = db.get_user_stats()
        await update.message.reply_text(
            f"‚úÖ **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:** –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI\n\n"
            f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats['active_users']}\n"
            f"üìÖ –î–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {user_info['added_at']}\n"
            f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_info['last_interaction']}"
        )
    else:
        await update.message.reply_text(
            "‚ùå **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:** –¢—ã –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ AI\n\n"
            "–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!"
        )

# --- /admin_stats: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ ---
async def admin_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ (–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ config)
    admin_ids = [94598500]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ ID

    if user.id not in admin_ids:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    stats = db.get_user_stats()

    message = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:**

üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}
üìã –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}

üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
"""

    for user_data in stats['recent_users']:
        username, first_name, last_name, last_interaction = user_data
        name = f"{first_name} {last_name}".strip()
        message += f"‚Ä¢ @{username} ({name}) - {last_interaction}\n"

    await update.message.reply_text(message)



def main():
    import config  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç telegram_bot_token –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞

    app = ApplicationBuilder().token(config.telegram_bot_token).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stop", stop_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("channels", channels_command))
    app.add_handler(CommandHandler("admin_stats", admin_stats_command))

    # Conversation handler –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
    recommend_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("recommend_channel", recommend_channel_start)],
        states={
            RECOMMEND_WAIT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, recommend_channel_receive)]
        },
        fallbacks=[CommandHandler("cancel", recommend_channel_cancel)]
    )
    app.add_handler(recommend_conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()