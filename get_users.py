import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
)
import json
import os
from datetime import datetime

SUBSCRIBERS_FILE = "subscribers.json"
RECOMMEND_WAIT_INPUT = 1

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)

def load_subscribers():
    if not os.path.exists(SUBSCRIBERS_FILE):
        logger.warning("[WARN] –§–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
        return []
    try:
        with open(SUBSCRIBERS_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get('subscribers', [])
    except Exception as e:
        logger.error(f"[ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {SUBSCRIBERS_FILE}: {e}")
        return []

def save_subscriber(user: Update.effective_user):
    subscribers = load_subscribers()
    user_ids = {sub['user_id'] for sub in subscribers}
    if user.id not in user_ids:
        subscriber = {
            "user_id": user.id,
            "username": user.username or "-",
            "first_name": user.first_name or "-",
            "last_name": user.last_name or "-",
            "added_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        subscribers.append(subscriber)
        with open(SUBSCRIBERS_FILE, 'w', encoding='utf-8') as f:
            json.dump({"subscribers": subscribers}, f, ensure_ascii=False, indent=2)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {subscriber}")
        return True
    return False

def remove_subscriber(user_id):
    subscribers = load_subscribers()
    new_subs = [sub for sub in subscribers if sub['user_id'] != user_id]
    with open(SUBSCRIBERS_FILE, 'w', encoding='utf-8') as f:
        json.dump({"subscribers": new_subs}, f, ensure_ascii=False, indent=2)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    was_added = save_subscriber(user)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π." if was_added else "–¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/stop ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
        "/recommend_channel ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "/channels ‚Äî —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏\n"
        "/status ‚Äî —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"
    )

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    was_added = save_subscriber(user)
    if was_added:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
    else:
        await update.message.reply_text("–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    remove_subscriber(user.id)
    await update.message.reply_text("–¢—ã –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –µ—Å–ª–∏ —á—Ç–æ!")

# --- Recommend Channel Conversation ---

async def recommend_channel_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ username (@example), –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. "
        "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
    )
    return RECOMMEND_WAIT_INPUT

async def recommend_channel_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text.strip()
    rec_info = (
        f"date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | "
        f"user_id: {user.id} | username: @{user.username or '-'} | "
        f"name: {user.first_name or '-'} {user.last_name or '-'} | "
        f"recommend: {text}\n"
    )
    with open("channel_recommendations.txt", "a", encoding="utf-8") as f:
        f.write(rec_info)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    return ConversationHandler.END

async def recommend_channel_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# --- /channels: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (—á–∏—Ç–∞–µ—Ç channels.json) ---
async def channels_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("channels.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            channels = data.get("channels", [])
        if not channels:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
            return
        msg = "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏:\n" + "\n".join(
            f"@{c['username']}" if c.get('username') else c.get('title', '-') for c in channels
        )
        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {e}")

# --- /status: —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ ---
async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    subscribers = load_subscribers()
    is_subscribed = any(sub['user_id'] == user.id for sub in subscribers)
    if is_subscribed:
        await update.message.reply_text("–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É ‚úÖ")
    else:
        await update.message.reply_text("–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")

def main():
    import config  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç telegram_bot_token –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞

    app = ApplicationBuilder().token(config.telegram_bot_token).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stop", stop_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("channels", channels_command))

    # Conversation handler –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
    recommend_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("recommend_channel", recommend_channel_start)],
        states={
            RECOMMEND_WAIT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, recommend_channel_receive)]
        },
        fallbacks=[CommandHandler("cancel", recommend_channel_cancel)]
    )
    app.add_handler(recommend_conv_handler)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    app.run_polling()

if __name__ == "__main__":
    main()top_command))
    app.add_handler(CommandHandler("channels", channels_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), echo))

    # Recommend channel
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("recommend_channel", recommend_channel_start)],
        states={
            RECOMMEND_WAIT_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, recommend_channel_receive)
            ],
        },
        fallbacks=[CommandHandler("cancel", recommend_channel_cancel)],
    )
    app.add_handler(conv_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == '__main__':
    main()
